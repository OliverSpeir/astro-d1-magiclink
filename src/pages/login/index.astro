---
export const prerender = false;
import Layout from "@components/Layout.astro";
import "@styles/login.css";
import {
  getUserEmailFromCookie,
  deleteUserEmailCookie,
  setUserEmailCookie,
} from "@auth";
import { actions } from "astro:actions";
import FormSubmitted from "@components/login/FormSubmitted.astro";
import InitialForm from "@components/login/InitialForm.astro";

const { user, session } = Astro.locals;
if (session || user) {
  return Astro.redirect("/");
}

let errorMessage = null;
let successMessage = null;
let savedEmail = getUserEmailFromCookie(Astro);
let formAction = null;

const invalidToken =
  Astro.url.searchParams.get("error") === "InvalidOrExpiredToken";
if (invalidToken) {
  deleteUserEmailCookie(Astro);
}

if (Astro.request.method === "POST") {
  try {
    const formData = await Astro.request.formData();
    const email = formData.get("email")?.toString() || "";
    const requestType = formData.get("formType")?.toString();
    formAction = requestType || null;

    if (!email && requestType !== "clearEmail") {
      errorMessage = "Email is required";
    } else if (requestType === "clearEmail") {
      await Astro.callAction(actions.auth.clearEmail, formData);
      return Astro.redirect(Astro.url.pathname);
    } else {
      if (email) {
        savedEmail = email;
        setUserEmailCookie(Astro, email);
      }

      let result;

      switch (requestType) {
        case "signin":
          result = await Astro.callAction(actions.auth.signin, formData);
          break;
        case "signup":
          result = await Astro.callAction(actions.auth.signup, formData);
          break;
        case "resend":
          result = await Astro.callAction(actions.auth.resend, formData);
          break;
        default:
          errorMessage = "Invalid form submission";
      }

      if (result) {
        if (result.error) {
          errorMessage = result.error.message;
        }
        if (result.data) {
          successMessage = result.data;
        }
      }
    }
  } catch (error) {
    // console.error(error);
    errorMessage =
      error instanceof Error ? error.message : "An unexpected error occurred";
  }
}

const isEmailSent = successMessage !== null;
---

<Layout>
  <main>
    <h1>Magic Link Auth</h1>
    {
      invalidToken && (
        <p aria-live="assertive" role="alert">
          Invalid or expired link, please try again.
        </p>
      )
    }
    {
      errorMessage && (
        <div aria-live="assertive" role="alert">
          {errorMessage}
        </div>
      )
    }
    {
      isEmailSent ? (
        <FormSubmitted
          formSuccess={successMessage}
          submittedEmail={savedEmail}
          lastAction={formAction}
        />
      ) : (
        <InitialForm submittedEmail={savedEmail} />
      )
    }
  </main>
  <script src="@modules/client/resendButtonCounter"></script>
</Layout>
